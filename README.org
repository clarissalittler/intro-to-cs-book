* The Point of This Book
  What I really want is for there to be a book that teaches introductory programming with an eye towards actually giving a decent introduction to the more formal concepts in computer science, at least the ones relevant to understanding how programming-in-and-of-itself works.
  
  Basically, I'm trying to write the book I wanted years ago when I thought, as someone who cut my teeth in the math department, that I just was wired wrong for learning how to code.

  The problem I had those years ago was that I wanted to find /meaning/ in the syntax of languages themselves. Fortran 77 and C++ were probably not good first languages to see if one wanted principled algebraic meaning, I suppose. 

  The reality, though, is that syntax is syntax and semantics is semantics. I don't mean to say that syntax can't and shouldn't convey meaning, but that sometimes syntax is convention or aesthetic or this-would-have-made-the-parser-twice-as-long. If I had had a book that explained the distinction between syntax and semantics and, in particular, the meaning of a program can be understood apart from the mysterious implementation running it, I think I would have started enjoying myself a lot more quickly.

That's the kind of thing I want to write. I want to write a book that ultimately leaves the reader, even without any real programming or mathematics background to speak of, with an understanding of the distinction between the parts of a language and their meaning, the distinction between describing a computation and performing one. I want anyone who makes it through the text to have the ability to quickly understand how to learn other languages by knowing how to break a new language down into familiar computational idioms.
